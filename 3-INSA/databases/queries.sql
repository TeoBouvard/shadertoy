--MDPORACLE

-- Lien pour rÃ©cupÃ©rer les donnÃ©es
CREATE DATABASE LINK LinkToCentral
CONNECT TO mguilhin
IDENTIFIED BY AlorsBonjour99
USING 'DB11';

-- Création des liens entre les bases
CREATE DATABASE LINK LinkToDB13
CONNECT TO mguilhin
IDENTIFIED BY MDPORACLE
USING 'DB13';

CREATE DATABASE LINK LinkToDB14
CONNECT TO mguilhin
IDENTIFIED BY MDPORACLE
USING 'DB14';

-- Création des tables
CREATE TABLE CLIENTS_EUN
AS
SELECT * FROM RYORI.CLIENTS@LinkToCentral
WHERE 1=0;

CREATE TABLE CLIENTS_AUTRE
AS
SELECT * FROM RYORI.CLIENTS@LinkToCentral
WHERE 1=0;

CREATE TABLE STOCK_EUN
AS
SELECT * FROM RYORI.STOCK@LinkToCentral
WHERE 1=0;

CREATE TABLE STOCK_AUTRE
AS
SELECT * FROM RYORI.STOCK@LinkToCentral
WHERE 1=0;

CREATE TABLE STOCK_ALLEMAGNE
AS
SELECT * FROM RYORI.STOCK@LinkToCentral
WHERE 1=0;

CREATE TABLE COMMANDES_EUN
AS
SELECT * FROM RYORI.COMMANDES@LinkToCentral
WHERE 1=0;


CREATE TABLE COMMANDES_AUTRE
AS
SELECT * FROM RYORI.COMMANDES@LinkToCentral
WHERE 1=0;

CREATE TABLE DETAILS_COMMANDES_EUN
AS
SELECT * FROM RYORI.DETAILS_COMMANDES@LinkToCentral
WHERE 1=0;

CREATE TABLE DETAILS_COMMANDES_AUTRE
AS
SELECT * FROM RYORI.DETAILS_COMMANDES@LinkToCentral
WHERE 1=0;

CREATE TABLE FOURNISSEURS
AS
SELECT * FROM RYORI.FOURNISSEURS@LinkToCentral
WHERE 1=0;

CREATE TABLE PAYS (
  CODE_CONTINENT number(2),
  NOM_PAYS varchar2(35),
  CONSTRAINT pays_pk PRIMARY KEY (CODE_CONTINENT,NOM_PAYS)
);


-- Peuplement
INSERT INTO PAYS VALUES(  1,'NORVEGE');
INSERT INTO PAYS VALUES(  1,'SUEDE'); 
INSERT INTO PAYS VALUES(  1,'DANEMARK');
INSERT INTO PAYS VALUES(  1,'ISLANDE');
INSERT INTO PAYS VALUES(  1,'FINLANDE');
INSERT INTO PAYS VALUES(  1,'ROYAUME-UNI');
INSERT INTO PAYS VALUES(  1,'IRLANDE');
INSERT INTO PAYS VALUES(  1,'BELGIQUE');
INSERT INTO PAYS VALUES(  1,'LUXEMBOURG');
INSERT INTO PAYS VALUES(  1,'PAYS-BAS');
INSERT INTO PAYS VALUES(  1,'ALLEMAGNE');
INSERT INTO PAYS VALUES(  1,'POLOGNE');
INSERT INTO PAYS VALUES(  2,'ESPAGNE');
INSERT INTO PAYS VALUES(  2,'PORTUGAL');
INSERT INTO PAYS VALUES(  2,'ANDORRE');
INSERT INTO PAYS VALUES(  2,'FRANCE');
INSERT INTO PAYS VALUES(  2,'GIBRALTAR');
INSERT INTO PAYS VALUES(  2,'ITALIE');
INSERT INTO PAYS VALUES(  2,'SAINTMARIN');
INSERT INTO PAYS VALUES(  2,'VATICAN');
INSERT INTO PAYS VALUES(  2,'MALTE');
INSERT INTO PAYS VALUES(  2,'ALBANIE');
INSERT INTO PAYS VALUES(  2,'BOSNIE-HERZEGOVINE');
INSERT INTO PAYS VALUES(  2,'CROATIE');
INSERT INTO PAYS VALUES(  2,'GRECE');
INSERT INTO PAYS VALUES(  2,'MACEDOINE');
INSERT INTO PAYS VALUES(  2,'MONTENEGRO');
INSERT INTO PAYS VALUES(  2,'SERBIE');
INSERT INTO PAYS VALUES(  2,'SLOVENIE');
INSERT INTO PAYS VALUES(  2,'BULGARIE');
INSERT INTO PAYS VALUES(  3,'ANTIGUA-ET-BARBUDA');
INSERT INTO PAYS VALUES(  3,'ARGENTINE');
INSERT INTO PAYS VALUES(  3,'BAHAMAS');
INSERT INTO PAYS VALUES(  3,'BARBADE' );
INSERT INTO PAYS VALUES(  3,'BELIZE' );
INSERT INTO PAYS VALUES(  3,'BOLIVIE');
INSERT INTO PAYS VALUES(  3,'BRESIL');
INSERT INTO PAYS VALUES(  3,'CANADA');
INSERT INTO PAYS VALUES(  3,'CHILI');
INSERT INTO PAYS VALUES(  3,'COLOMBIE');
INSERT INTO PAYS VALUES(  3,'COSTA RICA');
INSERT INTO PAYS VALUES(  3,'CUBA');
INSERT INTO PAYS VALUES(  3,'REPUBLIQUE DOMINICAINE');
INSERT INTO PAYS VALUES(  3,'DOMINIQUE');
INSERT INTO PAYS VALUES(  3,'EQUATEUR');
INSERT INTO PAYS VALUES(  3,'ETATS-UNIS');
INSERT INTO PAYS VALUES(  3,'GRENADE');
INSERT INTO PAYS VALUES(  3,'GUATEMALA');
INSERT INTO PAYS VALUES(  3,'GUYANA');
INSERT INTO PAYS VALUES(  3,'HAITI');
INSERT INTO PAYS VALUES(  3,'HONDURAS');
INSERT INTO PAYS VALUES(  3,'JAMAIQUE');
INSERT INTO PAYS VALUES(  3,'MEXIQUE');
INSERT INTO PAYS VALUES(  3,'NICARAGUA');
INSERT INTO PAYS VALUES(  3,'PANAMA');
INSERT INTO PAYS VALUES(  3,'PARAGUAY');
INSERT INTO PAYS VALUES(  3,'PEROU');
INSERT INTO PAYS VALUES(  3,'SAINT-CHRISTOPHE-ET-NIEVES');
INSERT INTO PAYS VALUES(  3,'SAINTE-LUCIE');
INSERT INTO PAYS VALUES(  3,'SAINT-VINCENT-ET-LES GRENADINES');
INSERT INTO PAYS VALUES(  3,'SALVADOR');
INSERT INTO PAYS VALUES(  3,'SURINAME');
INSERT INTO PAYS VALUES(  3,'TRINITE-ET-TOBAGO');
INSERT INTO PAYS VALUES(  3,'URUGUAY');
INSERT INTO PAYS VALUES(  3,'VENEZUELA');

INSERT INTO STOCK_EUN
SELECT * FROM RYORI.STOCK@LinkToCentral
WHERE UPPER(PAYS) IN ( SELECT NOM_PAYS
                       FROM PAYS
                       WHERE CODE_CONTINENT = 1
                       AND NOM_PAYS != 'ALLEMAGNE');
                       
INSERT INTO STOCK_AUTRE
SELECT * FROM RYORI.STOCK@LinkToCentral
WHERE UPPER(PAYS) NOT IN ( SELECT NOM_PAYS
                           FROM PAYS
                       
);

INSERT INTO STOCK_ALLEMAGNE
SELECT * FROM RYORI.STOCK@LinkToCentral
WHERE UPPER(PAYS) = 'ALLEMAGNE';

INSERT INTO CLIENTS_EUN
SELECT * FROM RYORI.CLIENTS@LinkToCentral
WHERE UPPER(PAYS) IN ( SELECT NOM_PAYS
                       FROM PAYS
                       WHERE CODE_CONTINENT = 1);
                       
                       
INSERT INTO CLIENTS_AUTRE
SELECT * FROM RYORI.CLIENTS@LinkToCentral
WHERE UPPER(PAYS) NOT IN ( SELECT NOM_PAYS
                           FROM PAYS
);

                       
INSERT INTO COMMANDES_EUN
SELECT *
FROM RYORI.COMMANDES@LinkToCentral
WHERE CODE_CLIENT IN ( SELECT CODE_CLIENT
                       FROM CLIENTS_EUN
);


INSERT INTO COMMANDES_AUTRE
SELECT *
FROM RYORI.COMMANDES@LinkToCentral
WHERE CODE_CLIENT IN ( SELECT DISTINCT CODE_CLIENT
                       FROM CLIENTS_AUTRE
);

INSERT INTO DETAILS_COMMANDES_EUN
SELECT *
FROM RYORI.DETAILS_COMMANDES@LinkToCentral
WHERE NO_COMMANDE IN ( SELECT DISTINCT NO_COMMANDE
                       FROM COMMANDES_EUN
);

INSERT INTO DETAILS_COMMANDES_AUTRE
SELECT *
FROM RYORI.DETAILS_COMMANDES@LinkToCentral
WHERE NO_COMMANDE IN ( SELECT DISTINCT NO_COMMANDE
                       FROM COMMANDES_AUTRE
);

INSERT INTO FOURNISSEURS
SELECT * FROM RYORI.FOURNISSEURS@LinkToCentral;

--Contraintes d'intégrité
--Clés primaires
ALTER TABLE STOCK_EUN
ADD CONSTRAINT pk_STOCK_EUN PRIMARY KEY (REF_PRODUIT, PAYS);

ALTER TABLE STOCK_AUTRE
ADD CONSTRAINT pk_STOCK_AUTRE PRIMARY KEY (REF_PRODUIT, PAYS);

ALTER TABLE STOCK_ALLEMAGNE
ADD CONSTRAINT pk_STOCK_ALLEMAGNE PRIMARY KEY (REF_PRODUIT, PAYS);

ALTER TABLE CLIENTS_EUN
ADD CONSTRAINT pk_CLIENTS_EUN PRIMARY KEY (CODE_CLIENT);

ALTER TABLE CLIENTS_AUTRE
ADD CONSTRAINT pk_CLIENTS_AUTRE PRIMARY KEY (CODE_CLIENT);

ALTER TABLE COMMANDES_EUN
ADD CONSTRAINT pk_COMMANDES_EUN PRIMARY KEY (NO_COMMANDE);

ALTER TABLE COMMANDES_AUTRE
ADD CONSTRAINT pk_COMMANDES_AUTRE PRIMARY KEY (NO_COMMANDE);

ALTER TABLE DETAILS_COMMANDES_EUN
ADD CONSTRAINT pk_DETAILS_COMMANDES_EUN PRIMARY KEY (NO_COMMANDE, REF_PRODUIT);

ALTER TABLE DETAILS_COMMANDES_AUTRE
ADD CONSTRAINT pk_DETAILS_COMMANDES_AUTRE PRIMARY KEY (NO_COMMANDE, REF_PRODUIT);

ALTER TABLE FOURNISSEURS
ADD CONSTRAINT pk_FOURNISSEURS PRIMARY KEY (NO_FOURNISSEUR);



--Clés étrangères classiques
ALTER TABLE COMMANDES_EUN
ADD CONSTRAINT fk_COMMANDES_EUN_CODE_CLIENT 
FOREIGN KEY (CODE_CLIENT)
REFERENCES CLIENTS_EUN(CODE_CLIENT)
ON DELETE SET NULL;

ALTER TABLE COMMANDES_AUTRE
ADD CONSTRAINT fk_COMMANDES_AUTRE_CODE_CLIENT 
FOREIGN KEY (CODE_CLIENT)
REFERENCES CLIENTS_AUTRE(CODE_CLIENT)
ON DELETE SET NULL;

ALTER TABLE DETAILS_COMMANDES_EUN
ADD CONSTRAINT fk_DETAILS_COMMANDES_EUN_NO_COMMANDE
FOREIGN KEY (NO_COMMANDE)
REFERENCES COMMANDES_EUN(NO_COMMANDE)
ON DELETE CASCADE;

ALTER TABLE DETAILS_COMMANDES_AUTRE
ADD CONSTRAINT fk_DETAILS_COMMANDES_AUTRE_NO_COMMANDE 
FOREIGN KEY (NO_COMMANDE) 
REFERENCES COMMANDES_AUTRE(NO_COMMANDE)
ON DELETE CASCADE;




--Clés étrangères réalisées à l'aide d'un trigger
/*CREATE OR REPLACE TRIGGER TRIGGER_FK_STOCK_EUN
AFTER INSERT OR UPDATE ON STOCK_EUN
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM tverny.PRODUITS@LINKTODB13
WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
IF (compteur = 0) THEN
RAISE_APPLICATION_ERROR(-20001,'ce produit n’existe pas dans la table produits');
END IF;
END;

/

CREATE OR REPLACE TRIGGER TRIGGER_FK_STOCK_AUTRE
AFTER INSERT OR UPDATE ON STOCK_AUTRE
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM tverny.PRODUITS@LINKTODB13
WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
IF (compteur = 0) THEN
RAISE_APPLICATION_ERROR(-20001,'ce produit n’existe pas dans la table produits');
END IF;
END;

/

CREATE OR REPLACE TRIGGER TRIGGER_FK_STOCK_ALLEMAGNE
AFTER INSERT OR UPDATE ON STOCK_ALLEMAGNE
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM tverny.PRODUITS@LINKTODB13
WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
IF (compteur = 0) THEN
RAISE_APPLICATION_ERROR(-20001,'ce produit n’existe pas dans la table produits');
END IF;
END;

/

CREATE OR REPLACE TRIGGER TRIGGER_FK_COMMANDES_EUN_EMPLOYES
AFTER INSERT OR UPDATE ON COMMANDES_EUN
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM MELKARCHOU.EMPLOYES@LINKTODB14
WHERE NO_EMPLOYE=:NEW.NO_EMPLOYE;
IF (compteur = 0) THEN
RAISE_APPLICATION_ERROR(-20001,'cet employé n existe pas');
END IF;
END;

/

CREATE OR REPLACE TRIGGER TRIGGER_FK_COMMANDES_AUTRE_EMPLOYES
AFTER INSERT OR UPDATE ON COMMANDES_AUTRE
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM MELKARCHOU.EMPLOYES@LINKTODB14
WHERE NO_EMPLOYE=:NEW.NO_EMPLOYE;
IF (compteur = 0) THEN
RAISE_APPLICATION_ERROR(-20001,'cet employé n’existe pas');
END IF;
END;

/

CREATE OR REPLACE TRIGGER TRIGGER_FK_DETAILS_COMMANDES_EUN_PRODUITS
AFTER INSERT OR UPDATE ON DETAILS_COMMANDES_EUN
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM TVERNY.PRODUITS@LINKTODB13
WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
IF (compteur = 0) THEN
RAISE_APPLICATION_ERROR(-20001,'ce produit n’existe pas dans la table produits');
END IF;
END;

/

CREATE OR REPLACE TRIGGER TRIGGER_FK_DETAILS_COMMANDES_AUTRE_PRODUITS
AFTER INSERT OR UPDATE ON DETAILS_COMMANDES_AUTRE
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM TVERNY.PRODUITS@LINKTODB13
WHERE REF_PRODUIT=:NEW.REF_PRODUIT;
IF (compteur = 0) THEN
RAISE_APPLICATION_ERROR(-20001,'ce produit n’existe pas dans la table produits');
END IF;
END;

/

CREATE OR REPLACE TRIGGER TRIGGER_FK_FOURNISSEURS
AFTER UPDATE OR DELETE ON FOURNISSEURS
FOR EACH ROW
DECLARE compteur NUMBER(5);

BEGIN
SELECT COUNT(*) INTO compteur
FROM TVERNY.PRODUITS@LINKTODB13
WHERE NO_FOURNISSEUR=:NEW.NO_FOURNISSEUR;
IF (compteur != 0) THEN
RAISE_APPLICATION_ERROR(-20001,'Ce fournisseur est associé à un produit');
END IF;
END;

*/

--Droits d'accès
GRANT SELECT ON CLIENTS_AUTRE TO MELKARCHOU;                                                                                                                    
GRANT SELECT ON CLIENTS_AUTRE TO TVERNY;                                                                                                                        
GRANT SELECT ON CLIENTS_EUN TO MELKARCHOU;                                                                                                                      
GRANT SELECT ON CLIENTS_EUN TO TVERNY;                                                                                                                          
GRANT SELECT ON COMMANDES_AUTRE TO MELKARCHOU;                                                                                                                  
GRANT SELECT ON COMMANDES_AUTRE TO TVERNY;                                                                                                                      
GRANT SELECT ON COMMANDES_EUN TO MELKARCHOU;                                                                                                                    
GRANT SELECT ON COMMANDES_EUN TO TVERNY;                                                                                                                        
GRANT SELECT ON DETAILS_COMMANDES_AUTRE TO MELKARCHOU;                                                                                                          
GRANT SELECT ON DETAILS_COMMANDES_AUTRE TO TVERNY;                                                                                                              
GRANT SELECT ON DETAILS_COMMANDES_EUN TO MELKARCHOU;                                                                                                            
GRANT SELECT ON DETAILS_COMMANDES_EUN TO TVERNY;                                                                                                                
GRANT SELECT ON FOURNISSEURS TO MELKARCHOU;                                                                                                                     
GRANT SELECT ON FOURNISSEURS TO TVERNY;                                                                                                                         
GRANT SELECT ON PAYS TO MELKARCHOU;                                                                                                                             
GRANT SELECT ON PAYS TO TVERNY;                                                                                                                                 
GRANT SELECT ON STOCK_ALLEMAGNE TO MELKARCHOU;                                                                                                                  
GRANT SELECT ON STOCK_ALLEMAGNE TO TVERNY;                                                                                                                      
GRANT SELECT ON STOCK_AUTRE TO MELKARCHOU;                                                                                                                      
GRANT SELECT ON STOCK_AUTRE TO TVERNY;                                                                                                                          
GRANT SELECT ON STOCK_EUN TO MELKARCHOU;                                                                                                                        
GRANT SELECT ON STOCK_EUN TO TVERNY;

--Définition de synonymes
CREATE OR REPLACE VIEW STOCK as(
  SELECT * FROM STOCK_EUN
  UNION ALL SELECT * FROM STOCK_AUTRE
  UNION ALL SELECT * FROM STOCK_ALLEMAGNE
  UNION ALL SELECT * FROM melkarchou.STOCK_AMERIQUE@LINKTODB14
  UNION ALL SELECT * FROM tverny.STOCK_EUS@LINKTODB13
);

CREATE OR REPLACE VIEW COMMANDES as
(SELECT * FROM COMMANDES_EUN
UNION ALL SELECT * FROM COMMANDES_AUTRE
UNION ALL SELECT * FROM tverny.COMMANDES_EUS@LINKTODB13
UNION ALL SELECT * FROM melkarchou.COMMANDES_AMERIQUE@LINKTODB14);

CREATE OR REPLACE VIEW DETAILS_COMMANDES as
(SELECT * FROM DETAILS_COMMANDES_EUN
UNION ALL SELECT * FROM DETAILS_COMMANDES_AUTRE
UNION ALL SELECT * FROM melkarchou.DETAILS_COMMANDES_AMERIQUE@LINKTODB14
UNION ALL SELECT * FROM tverny.DETAILS_COMMANDES_EUS@LINKTODB13);

CREATE OR REPLACE VIEW CLIENTS as
(SELECT * FROM CLIENTS_EUN
UNION ALL SELECT * FROM CLIENTS_AUTRE
UNION ALL SELECT * FROM melkarchou.CLIENTS_AMERIQUE@LINKTODB14
UNION ALL SELECT * FROM tverny.CLIENTS_EUS@LINKTODB13);

CREATE OR REPLACE SYNONYM PRODUITS FOR PRODUITS_MW;
CREATE OR REPLACE SYNONYM CATEGORIES FOR CATEGORIES_MW;
CREATE OR REPLACE SYNONYM EMPLOYES FOR EMPLOYES_MW;


--Réplication

ALTER VIEW EMPLOYES
RENAME TO OLD_EMPLOYES;


CREATE MATERIALIZED VIEW EMPLOYES_MW
REFRESH COMPLETE
NEXT sysdate + (1/24/60)
AS SELECT * FROM melkarchou.EMPLOYES@LINKTODB14;

CREATE MATERIALIZED VIEW CATEGORIES_MW
REFRESH COMPLETE
NEXT sysdate + (1/24/60)
AS SELECT * FROM tverny.CATEGORIES@LINKTODB13;

CREATE MATERIALIZED VIEW PRODUITS_MW
REFRESH FAST
NEXT sysdate + (1/24/60)
AS SELECT * FROM tverny.PRODUITS@LINKTODB13;

select * from CATEGORIES_MW;
select * from PRODUITS;


--Nettoyage
DROP DATABASE LINK LinkToCentral;

SELECT *
FROM PRODUITS
WHERE REF_PRODUIT = 12;


